#####################################################################
#                                                                   #
#   EXAMPLE OF CONFIG FILE FOR GW ANALYSIS WITH BAJES               #
#                                                                   #
#   This file should contains 4 sections:                           #
#     - pipe: information for the pipeline and the cluster          #
#     - sampler: set up of the sampler and files                    #
#     - data: link to data and ASDs                                 #
#     - prior: define prior bound and parameters                    #
#                                                                   #
#####################################################################

[pipe]
# specify the scheduler of your job (slurm, condor not available yet) or use bash
sub = bash

# assign a name to the job
# the executable will be named as jobname.sub
jobname = example

# select type of messenger to included in the model,
# currently only gw and kn are available
# for multi-messenger analysis, use comma separated words as in the example
messenger = gw,kn

# Output directory, everything will be stored there
outdir = /path/to/output/dir

# activate MPI pipeline (default 0)
mpi = 0

# optional, if mpi=1 choose the type of mpi,
# default pmi2
mpi-type = pmi2

# optional, if mpi=1 enable fast communication (default 0)
mpi-fast = 0

# number of parallel processes,
# Depending on the mpi flag, nprocs assumes different a meaning:
# if mpi = 0, nprocs is the number of parallel threads,
# if mpi = 1, nprocs is the number of parallel tasks,
# Moreover, one process is always reserved for the master,
# then the actual number of workers is nprocs-1.
nprocs  = 8

# The following arguments necessary to submit the job to the cluster,
# otherwise you can omit them
#
# prefix        = path to bajes repository
# walltime      = wall-time selected for the job
# partition     = name of the cluster you want to use
# nnodes        = number of nodes (default 1)
# cpu-per-task  = specify the number of cpu-per-task (optional)
#                 default with multithreads, 1 cpu per thread
#                 default with MPI, 1 cpu per task
# mem-per-cpu   = memory per cpu (optional, default 1G)
# mail          = user email address (optional)
# export        = environment variables to be exported (optional),
#                 comma separated, as: VAR1=/path/to/dir1,VAR2=/path/to/dir2
# source        = path to files to be sourced (optional),
#                 comma separated, as: /path/to/source1,/path/to/source2
# module        = module to be activated (optional),
#                 comma separated, as: /path/to/module1,/path/to/module2
# other         = other strings to be added in the executable (optional)

[sampler]
# which sampler you want to use:
# 'emcee' for mcmc sampling with emcee
# 'ptmcmc' for ptmcmc sampling
# 'cpnest' for nested sampling with cpnest,
# 'dynesty' for nested sampling with dynesty,
# 'dynesty-dyn' for dynamic nested sampling with dynesty,
# 'ultranest' for reactive nested sampling with ultranest,
engine = cpnest

# optional, activate frequency binning (default 0)
binning = 0

# optional, seed for the pseudo-random generator
seed = 1234567

# optional, number of iterations before every checkpoint (default 0)
# obs. set this value different from 0 if you want to enable resuming
ncheck = 100

# optional, use slice proposal, for mcmc and cpnest (default 0)
slice = 0

# if engine == 'cpnest':
# cpnest sampling needs the following parameters,
# nlive     : number of live points
# maxmcmc   : number of maxmcmc for every iteration (optional)
# poolsize  : number of samples in the pool (optional)
# tolerance : evidence tolerance for stopping condition (optional)
# seed      : seed for the pseudo-random generator (optional)
#
# nlive     = 1024
# tolerance = 0.1
# maxmcmc   = 2048
# poolsize  = 2048

# if engine == 'dynesty':
# dynesty sampling needs the following parameters,
# nlive     : number of live points
# nbatch    : number of live point in every batch (for dynest)
# maxmcmc   : maximum number of mcmc iteration (optional, default 4096)
# minmcmc   : minimum number of mcmc iteration (optional, default 32)
# tolerance : evidence tolerance for stopping condition (optional, default 0.1)
# nact      : safe parameter for mcmc sub-chains (optional, default 5)
#
# nlive     = 1024
# tolerance = 0.1
# nbatch    = 512
# maxmcmc   = 4096

# if engine == 'ultranest':
# dynesty sampling needs the following parameters,
# nlive     : minimum number of live points
# maxmcmc   : maximum number of mcmc iteration (optional, default 4096)
# minmcmc   : minimum number of mcmc iteration (optional, default 32)
# tolerance : evidence tolerance for stopping condition (optional, default 0.1)
# nout      : requested number of posterior samples (optional, default 10000)
# dkl       : KL divergence of the posterior (optional, default 0.5)
# z-frac    : remaining evidence fraction (optional, default estimated from tolerance)
#
# nlive     = 1024
# tolerance = 0.1
# nout      = 8000
# maxmcmc   = 4096

# if engine == 'emcee':
# emcee sampling needs the following parameters,
# nwalk    : number of walkers
# nout     : requested number of posterior samples
# nburn    : number of burn-in iterations (optional)
# seed     : seed for the pseudo-random generator (optional)
#
# nwalk     = 256
# nout      = 4000
# nburn     = 25000

# if engine == 'ptmcmc':
# ptemcee sampling needs the following parameters,
# nwalk    : number of walkers
# ntemp    : number of parallel tempered ensambles
# nout     : requested number of posterior samples
# nburn    : number of burn-in iterations (optional)
# tmax     : maximum temperature (optional, default inf)
# nswap    : number of iterations between each swapping (optional)
# seed     : seed for the pseudo-random generator (optional)
#
# nwalk     = 256
# ntemp     = 8
# nout      = 4000
# nburn     = 15000

[gw-data]

# specify which kind of data will be passed to bajes,
# 'inject' create and analyze an injection
# 'gwosc' download and analyze LIGO-Virgo data
# 'local' read and analyze local files
data-flag = inject

# option for injection with txt file,
# specify the location of the time-domain window:
# 'both' to apply the window at the beginning and at the end of the time-series,
# 'low' to apply the window only at the beginning of the time-series,
# 'none' to not apply any window
# If you generate the injection from a params.ini, the window is not needed since
# the waveform is already tapered/windowed/padded/etc
# window = none

# option for injection,
# zero noise configuration does not use artificial noise
# and the signal will be identically the projected template
# zero-noise = 0

# optional, alpha parameter of the Tukey window,
# with value between 0 and 1, default 0.1
# alpha = 0.1

# option for gwbinning,
# specify the fiducial waveform parameters using a config file,
# see docs/params_example.ini
fiducial = ./docs/params_example.ini

# Detector to be used, i.e. H1, L1, V1, K1
# please use comma-separated names like in the example
ifos = H1,L1,V1

# GPS time of the strain segment, central value
t-gps = 1126259462

# length of the strain segment [sec]
seglen = 32

# sampling rate of the strain segment [Hz]
srate = 4096

# minimum and maximum frequency for the analysis [Hz]
f-min = 20.
f-max = 1024.

# if data-flag == 'inject':
# the config should contain the path to the time-domain waveform
# to be injected (.txt or .dat, with 3 columns [time, h+, hx])
# or the path to a params.ini file, with the section [injection],
# as in the example docs/params_example.ini.
# It is possible to specify the sky location (right ascension,
# declination and polarization, everything measured in radiants)
# of the injected signal using the related keys: inj-ra, inj-dec,
# inj-pol. Otherwise the signal will be injected with pol=0
# and optimal sky location for the first detector.
#
# inj-strain = /...

# if data-flag == 'local':
# If this flag is used, the pipeline will read directly
# the given file. The config should contain the path to
# the strain file. This files should have 2 columns [time, strain].
#
# H1-strain  = /...
# L1-strain  = /...
# V1-strain  = /...

# if data-flag == 'gwosc':
# the strains for every IFO are downloaded from GWOSC archive.
# By default, t-gps and seglen determine the strain to be fetched
# (t-gps is the central time). However, it is possible to use the flag
# 'event' for confidential GW triggers, i.e. GW150914.
# It is also possible to specify the 'version' of the data.
# If both are used, 'event' has priority.
#
# event      = GW150914
# version    = 3

# Include the path to the ASD file for every IFO.
# The files should cointain 2 columns [freq, asd].
# If you want design sensitivity just type design, like in the example.
# If you wanto to use the ASD from a specific event, type the name of the event
#
# H1-asd     = design
# L1-asd     = design
# V1-asd     = design

# There is the possibility to include spectral calibration envelopes
# to the waveform. This options can be used with the IFO-calib
# flag, for every given IFO. If you wanto to use the calibration envelopes
# from a specific event, type the name of the event.
# If the user decide to include this option, please be careful to
# use a calibration files for every IFO, otherwise the pipeline will
# ignore the calibration envelopes.
#
# H1-calib  = /...
# L1-calib  = /...
# V1-calib  = /...


[gw-prior]

# gravitational-wave model for the analysis,
# the list of available approximants is:
# - TaylorF2_3.5PN
# - TaylorF2_5.5PN
# - TEOBResumS_TD
# - TEOBResumS_FD
# - NRPM
# - MLGW
# - NRsur7dq4
# - NRHybSur3dq8
# - NRHybSur3dq8Tidal
# - LALSimTD-approx (call SimInspiralChooseTDWaveform using the specified approx, i.e. LALSimTD-SEOBNRv4)
# - LALSimFD-approx (call SimInspiralChooseFDWaveform using the specified approx, i.e. LALSimFD-IMRPhenomPv2)
approx =

# lower bound for chirp mass [solar masses]
mchirp-min = 25.

# upper bound for chirp mass [solar masses]
mchirp-max = 45.

# upper bound for mass ratio [q = m1/m2 > 1, m1 >= m2]
q-max = 3.

# flag for spin components:
# 'no-spins'            : no spins contribution
# 'align-volumetric'    : aligned spins with volumetric prior (uniform in spin components)
# 'align-isotropic'     : aligned spins with isotropic prior (uniform in spin magnitude)
# 'precess-volumetric'  : precessing spins with volumetric prior (uniform in spin components)
# 'precess-isotropic'   : precessing spins with isotropic prior (uniform in spin magnitude)
spin-flag = align-isotropic

# if spin-flag != 'no-spins',
# upper bound for magnitude of spin parameters
spin-max = 0.8

# flag for tidal components:
# 'no-tides'    : no tidal contribution
# 'bns-tides'   : uniform prior in tidal components lambda1, lambda2
# 'bhns-tides'  : uniform prior in secondary tidal components lambda2,
#                 primary objected assumed to be a BH
# 'nsbh-tides'  : uniform prior in primary tidal components lambda1,
#                 secondary objected assumed to be a BH
tidal-flag = no-tides

# if tidal-flag != 'no-tides',
# lower and upper bounds for tidal components
lambda-min = 0.
lambda-max = 5000.

#lower bound for distance [Mpc]
dist-min = 50

# upper bound for distance [Mpc]
dist-max = 1000

# optional,
# flag for luminosity distance prior
# 'vol' : volumetric prior (default)
# 'com' : comoving volume prior
# 'log' : flat un log-distance
# dist-flag = vol

# optional,
# upper and lower bounds for time shift parameter, default 1.
# If only tshift-max is used , tshift-min = - tshift-max
# tshift-max = +1
# tshift-min = -1

# optional,
# compute marginalized logL over phi_ref, default False
# marg-phi = 0

# optional,
# compute marginalized logL over time_shift, default False.
# obs. This option is not available with frequency binning and with joined likelihood.
# marg-time = 0

# optional,
# highest order mode, default 0
# obs. it is possible to use only the 22-mode setting l-max=0
# l-max = 0

# optional,
# Introduce spectral calibration envelopes, speficying the
# number of nodes in log-frequency. Default 0.
# obs. This option requires the IFO-calib path, for every IFO
# spcal-nodes = 0

# optional,
# Introduce free parameters to calibrate PSD estimation.
# obs. This option is not available with frequency binning. Default 0.
# psd-weights = 0

# optional,
# include energy and angular momentum parameters
# within the given bounds. Default 0
# ej-flag = 0
# en-min  = 0.95
# en-max  = 1.5
# j-min   = 3
# j-max   = 5

# optional,
# include eccentricity parameter within the given bounds
# Default 0
# ecc-flag = 0
# ecc-min  = 0.001
# ecc-max  = 1

# optional,
# number of grid-points for each parameter
# for prior interpolation (default 900)
# prior-grid = 900

# optional,
# fix the value of a specific parameter,
# example for sky location:
# fix-ra = 0.0
# fix-dec = 0.0

[kn-data]

# List of photometric bands to use
photo-bands = U,V,R,K,Ks

# Optional, list of wave-length associated with each band photometric bands
# If none is given, then the default lambdas are used
photo-lambdas =

# Include the path to the magnitude folder, containing a txt file for each band.
# The files should cointain 3 columns [time, magnidute, standard deviation].
# If you wanto to use the data from AT2017gfo, type the name as in the example.
mag-folder = AT2017gfo

# apply dereddening to given data, default=True
dered = 1

[kn-prior]

# names of ejecta components comma separated,
# they will define the number of components for
# lightcurve estimation. Choose the name you prefer.
comps = dyn,sec

# lower bound for ejected mass [solar masses],
# for every component, comma separated
mej-min = 0.001,0.01

# upper bound for ejected mass [solar masses],
# for every component, comma separated
mej-max = 0.1,0.2

# lower bound for velocity [c],
# for every component, comma separated
vel-min = 0.1,0.001

# upper bound for velocity [c],
# for every component, comma separated
vel-max = 0.333,0.1

# lower bound for opacity [cm^2 / g],
# for every component, comma separated
opac-min = 0.01,0.01

# upper bound for opacity [cm^2 / g],
# for every component, comma separated
opac-max = 30,30

#lower bound for distance [Mpc]
dist-min = 50

# upper bound for distance [Mpc]
dist-max = 1000

# optional,
# use a uniform prior in log-distance instead of
# standard volumetric prior on distance.
# log-distance = 0

#lower bound for heating factor [erg / s / g]
eps-min = 1e17

# upper bound for heating factor [erg / s / g]
eps-max = 5e19

# optional,
# use a uniform prior in log-epsilon instead of
# standard uniform prior on heating factor.
# log-epsilon = 0

# optional,
# include extra heating-rate coefficients in sampling (default False)
# extra-heat = 0

# optional,
# fix value of extra heating-rate coefficients
# (default values extracted from Korobin et al. 2012)
# heat-time = 1.3
# heat-alpha = 1.3
# heat-sigma = 0.11

# optional,
# upper and lower bounds for time shift parameter [s] (default 86400s).
# If only tshift-max is used , tshift-min = - tshift-max
# tshift-max = +86400
# tshift-min = -86400

# optional,
# number of point of velocity grid for lightcurve integrator (default 400)
# vel-grid = 400

# optional,
# lower value of velocity grid for lightcurve integrator (default 1e-7)
# vel-min-grid = 1e-7

# optional,
# number of point of time grid for lightcurve evaluation (default 1)
# time-grid = 400

# optional,
# lower value of time grid for lightcurve evaluation (default 1)
# time-min-grid = 1

# optional,
# number of grid-points for each parameter
# for prior interpolation (default 900)
# prior-grid = 900

# optional,
# fix the value of a specific parameter:
# fix-eps0 = 2e18



